{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setcategories","useState","inputvalue","setinputvalue","onSubmit","e","preventDefault","trim","length","cat","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAG,OAAKP,GAAL,mBAAoBO,OACrCN,EAAc,MAMlB,SACG,uBACKO,KAAK,OACLC,MAAST,EACTU,SAlBc,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACP,mCACNC,EAFa,iDAEmCC,UAAUH,GAF7C,6BACP,oCADO,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QAXvB,kBAeZM,GAfY,4CAAH,sDCEPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACjC,OACI,sBAAKc,UAAU,yCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCFHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEtB,ECHwB,SAACA,GAEzB,MAA0Bd,mBAAS,CAC/BqB,KAAO,GACPa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAU,WACNxB,EAASC,GACJwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAGvB,CAAEpB,IAEGqB,EDdkBK,CAAc1B,GAAhCO,EAAP,EAAOA,KAAMa,EAAb,EAAaA,QAGb,OACI,qCACI,oBAAIJ,UAAU,oCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,2BAEb,qBAAKA,UAAU,YAAf,SAEIT,EAAKE,KAAK,SAAAC,GAAG,OACb,cAAC,EAAD,eAESA,GADEA,EAAIC,aEhBlBgB,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACE,8CACA,uBACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEQ2C,EAAWnB,KAAK,SAAAT,GAAQ,OAEpB,aADA,CACC,EAAD,CAEEA,SAAUA,GADHA,Y,MCjB/B6B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ade67fb8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setcategories}) => {\n\n    const [inputvalue, setinputvalue] = useState('');\n\n    const handleInputChange = (e) => {\n        setinputvalue(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        if( inputvalue.trim().length > 2){\n            setcategories(cat => [inputvalue, ...cat]);\n            setinputvalue('');\n        }\n        \n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n           <input\n                type='text'\n                value = {inputvalue}\n                onChange = { handleInputChange }\n           />   \n        </form>\n    )\n}\n\nAddCategory.propTypes = {\n    setcategories: PropTypes.func.isRequired\n}","export const getGifs = async( category ) =>{\n    const key = 'nQLw0PRLyfrF4AFaiI1LG18xuhzPsZjm'\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=${key}`\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    //console.log(data);\n\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n    return (\n        <div className=\"card animate__animated animate__bounce\">\n            <img src={url} alt={title} />\n            <p>{title}</p>\n        </div>\n    )\n}\n","import React from 'react';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n    const {data, loading } = useFetchGifs( category );\n\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__FadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">'Cargando...'</p>}\n            \n            <div className=\"card-grid\">           \n                {\n                data.map( img  =>(\n                <GifGridItem \n                    key = {img.id}\n                    {... img} \n                />\n                ))\n\n                }\n\n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from '../helpers/getGifs';\n\nexport const useFetchGifs = (category) => {\n    \n    const [state, setState] = useState({\n        data : [],\n        loading: true\n    });\n\n    useEffect(() =>{\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                });\n            })\n    },[ category ])\n\n    return state;\n\n}\n","import React, { useState } from 'react'\nimport {AddCategory} from './Components/AddCategory'\nimport { GifGrid } from './Components/GifGrid';\nexport const GifExpertApp = () => {\n\n\n    const [categories, setcategories] = useState(['One Punch']);\n    \n    //const handleAdd = () => {\n    //   setcategories([...categories,'HunterxHunter']);\n    //}\n\n\n    return (\n        <>\n          <h2>GifExpertApp</h2>  \n          <hr />\n          <AddCategory setcategories={setcategories}/>\n          <ol>\n              {\n                  categories.map( category => (\n                      /*return <li key={category}>{category}</li>*/\n                      <GifGrid \n                        key = {category}\n                        category={category} \n                      />\n                  ))\n              }\n          </ol>\n        </>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}